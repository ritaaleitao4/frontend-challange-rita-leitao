{"remainingRequest":"/Users/hypnotic/Downloads/frontend-challenge-master 3/node_modules/babel-loader/lib/index.js!/Users/hypnotic/Downloads/frontend-challenge-master 3/node_modules/eslint-loader/index.js??ref--13-0!/Users/hypnotic/Downloads/frontend-challenge-master 3/src/store/actions.js","dependencies":[{"path":"/Users/hypnotic/Downloads/frontend-challenge-master 3/src/store/actions.js","mtime":1580401588133},{"path":"/Users/hypnotic/Downloads/frontend-challenge-master 3/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hypnotic/Downloads/frontend-challenge-master 3/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/hypnotic/Downloads/frontend-challenge-master 3/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/hypnotic/Downloads/frontend-challenge-master 3/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport transcriptionsServices from '@/api/transcriptionsServices';\n\nvar actionGetTranscriptionsData =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee(_ref) {\n    var commit;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            commit = _ref.commit;\n            _context.next = 3;\n            return transcriptionsServices.getTranscriptions().then(function (data) {\n              console.log('data', data);\n              commit('modifyListData', data);\n            }).catch(function (error) {\n              if (error) {\n                commit('displayError', 'An error occured while retrieving the transcriptions. Please try again.');\n              }\n            });\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function actionGetTranscriptionsData(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar addNewTranscription = function addNewTranscription(_ref3) {\n  var commit = _ref3.commit;\n  commit('addListItem');\n};\n\nvar deleteTranscription = function deleteTranscription(_ref4, payload) {\n  var commit = _ref4.commit;\n  commit('deleteListItem', payload);\n};\n\nvar uploadTranscriptionsData =\n/*#__PURE__*/\nfunction () {\n  var _ref6 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee2(_ref5, payload) {\n    var commit;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            commit = _ref5.commit;\n            _context2.next = 3;\n            return transcriptionsServices.saveTranscriptions(payload).then(function (response) {//\n            }).catch(function (error) {\n              if (error) {\n                commit('displayError', 'An error occured while saving the transcriptions. Please try again.');\n              }\n            });\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function uploadTranscriptionsData(_x2, _x3) {\n    return _ref6.apply(this, arguments);\n  };\n}();\n\nexport default {\n  actionGetTranscriptionsData: actionGetTranscriptionsData,\n  addNewTranscription: addNewTranscription,\n  deleteTranscription: deleteTranscription,\n  uploadTranscriptionsData: uploadTranscriptionsData\n};",{"version":3,"sources":["/Users/hypnotic/Downloads/frontend-challenge-master 3/src/store/actions.js"],"names":["transcriptionsServices","actionGetTranscriptionsData","commit","getTranscriptions","then","data","console","log","catch","error","addNewTranscription","deleteTranscription","payload","uploadTranscriptionsData","saveTranscriptions","response"],"mappings":";;AAAA,OAAOA,sBAAP,MAAmC,8BAAnC;;AAEA,IAAMC,2BAA2B;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,MAAT,QAASA,MAAT;AAAA;AAAA,mBAC5BF,sBAAsB,CAACG,iBAAvB,GACHC,IADG,CACE,UAACC,IAAD,EAAU;AACdC,cAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,IAApB;AACAH,cAAAA,MAAM,CAAC,gBAAD,EAAmBG,IAAnB,CAAN;AACD,aAJG,EAIDG,KAJC,CAIK,UAACC,KAAD,EAAW;AAClB,kBAAIA,KAAJ,EAAW;AACTP,gBAAAA,MAAM,CAAC,cAAD,EAAiB,yEAAjB,CAAN;AACD;AACF,aARG,CAD4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAA3BD,2BAA2B;AAAA;AAAA;AAAA,GAAjC;;AAYA,IAAMS,mBAAmB,GAAG,SAAtBA,mBAAsB,QAAgB;AAAA,MAAbR,MAAa,SAAbA,MAAa;AAC1CA,EAAAA,MAAM,CAAC,aAAD,CAAN;AACD,CAFD;;AAIA,IAAMS,mBAAmB,GAAG,SAAtBA,mBAAsB,QAAaC,OAAb,EAAyB;AAAA,MAAtBV,MAAsB,SAAtBA,MAAsB;AACnDA,EAAAA,MAAM,CAAC,gBAAD,EAAmBU,OAAnB,CAAN;AACD,CAFD;;AAIA,IAAMC,wBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,yBAAmBD,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAASV,YAAAA,MAAT,SAASA,MAAT;AAAA;AAAA,mBACzBF,sBAAsB,CAACc,kBAAvB,CAA0CF,OAA1C,EACHR,IADG,CACE,UAACW,QAAD,EAAc,CACpB;AACC,aAHG,EAGDP,KAHC,CAGK,UAACC,KAAD,EAAW;AAClB,kBAAIA,KAAJ,EAAW;AACTP,gBAAAA,MAAM,CAAC,cAAD,EAAiB,qEAAjB,CAAN;AACD;AACF,aAPG,CADyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAxBW,wBAAwB;AAAA;AAAA;AAAA,GAA9B;;AAWA,eAAe;AACbZ,EAAAA,2BAA2B,EAA3BA,2BADa;AAEbS,EAAAA,mBAAmB,EAAnBA,mBAFa;AAGbC,EAAAA,mBAAmB,EAAnBA,mBAHa;AAIbE,EAAAA,wBAAwB,EAAxBA;AAJa,CAAf","sourcesContent":["import transcriptionsServices from '@/api/transcriptionsServices'\n\nconst actionGetTranscriptionsData = async ({ commit }) => {\n  await transcriptionsServices.getTranscriptions()\n    .then((data) => {\n      console.log('data', data)\n      commit('modifyListData', data)\n    }).catch((error) => {\n      if (error) {\n        commit('displayError', 'An error occured while retrieving the transcriptions. Please try again.')\n      }\n    })\n}\n\nconst addNewTranscription = ({ commit }) => {\n  commit('addListItem')\n}\n\nconst deleteTranscription = ({ commit }, payload) => {\n  commit('deleteListItem', payload)\n}\n\nconst uploadTranscriptionsData = async ({ commit }, payload) => {\n  await transcriptionsServices.saveTranscriptions(payload)\n    .then((response) => {\n    //\n    }).catch((error) => {\n      if (error) {\n        commit('displayError', 'An error occured while saving the transcriptions. Please try again.')\n      }\n    })\n}\n\nexport default {\n  actionGetTranscriptionsData,\n  addNewTranscription,\n  deleteTranscription,\n  uploadTranscriptionsData\n}\n"]}]}