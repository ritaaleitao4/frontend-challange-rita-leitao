{"remainingRequest":"/Users/hypnotic/Desktop/frontend-challenge/node_modules/babel-loader/lib/index.js!/Users/hypnotic/Desktop/frontend-challenge/node_modules/eslint-loader/index.js??ref--13-0!/Users/hypnotic/Desktop/frontend-challenge/src/store/storeModules.js","dependencies":[{"path":"/Users/hypnotic/Desktop/frontend-challenge/src/store/storeModules.js","mtime":1580422897695},{"path":"/Users/hypnotic/Desktop/frontend-challenge/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hypnotic/Desktop/frontend-challenge/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/hypnotic/Desktop/frontend-challenge/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.object.values\";\nimport \"core-js/modules/es6.array.some\";\nimport \"core-js/modules/es6.array.filter\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/hypnotic/Desktop/frontend-challenge/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _ from 'lodash';\nimport transcriptionsEndpoints from '@/api/transcriptionsEndpoints';\nexport default {\n  state: {\n    transcriptionsData: [],\n    errorMessage: ''\n  },\n  getters: {\n    getInfoDataTranscriptions: function getInfoDataTranscriptions(state) {\n      return state.transcriptionsData;\n    },\n    getInfoDataErrorMessage: function getInfoDataErrorMessage(state) {\n      return state.errorMessage;\n    }\n  },\n  mutations: {\n    modifyListData: function modifyListData(state, payload) {\n      state.transcriptionsData = payload;\n    },\n    deleteListItem: function deleteListItem(state, payload) {\n      state.transcriptionsData = _.remove(state.transcriptionsData, function (arr) {\n        return arr.id !== payload;\n      });\n    },\n    addListItem: function addListItem(state) {\n      var listItem = {\n        id: _.random(100000000, 100000000000000),\n        voice: '',\n        text: ''\n      };\n      state.transcriptionsData.push(listItem);\n    },\n    displayError: function displayError(state, payload) {\n      state.errorMessage = payload;\n      window.setTimeout(function () {\n        state.errorMessage = '';\n      }, 3000);\n    }\n  },\n  actions: {\n    actionGetTranscriptionsData: function () {\n      var _actionGetTranscriptionsData = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(context) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return transcriptionsEndpoints.getTranscriptions().then(function (response) {\n                  context.commit('modifyListData', response.data);\n                }).catch(function (error) {\n                  if (error) {\n                    context.commit('displayError', 'An error occured while retrieving the transcriptions. Please try again.');\n                  }\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function actionGetTranscriptionsData(_x) {\n        return _actionGetTranscriptionsData.apply(this, arguments);\n      }\n\n      return actionGetTranscriptionsData;\n    }(),\n    addNewTranscription: function addNewTranscription(context) {\n      context.commit('addListItem');\n    },\n    deleteTranscription: function deleteTranscription(context, payload) {\n      context.commit('deleteListItem', payload);\n    },\n    uploadTranscriptionsData: function () {\n      var _uploadTranscriptionsData = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(context, payload) {\n        var invalidFields;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                invalidFields = payload.filter(function (element) {\n                  return Object.values(element).some(function (x) {\n                    return x === null || x === '';\n                  });\n                }).length;\n\n                if (!invalidFields) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                context.commit('displayError', 'The list you\\'re trying to upload is empty or has invalid or non saved fields.');\n                _context2.next = 7;\n                break;\n\n              case 5:\n                _context2.next = 7;\n                return transcriptionsEndpoints.saveTranscriptions(payload).then(function () {//\n                }).catch(function (error) {\n                  if (error) {\n                    context.commit('displayError', 'An error occured while saving the transcriptions. Please try again.');\n                  }\n                });\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function uploadTranscriptionsData(_x2, _x3) {\n        return _uploadTranscriptionsData.apply(this, arguments);\n      }\n\n      return uploadTranscriptionsData;\n    }()\n  }\n};",{"version":3,"sources":["/Users/hypnotic/Desktop/frontend-challenge/src/store/storeModules.js"],"names":["_","transcriptionsEndpoints","state","transcriptionsData","errorMessage","getters","getInfoDataTranscriptions","getInfoDataErrorMessage","mutations","modifyListData","payload","deleteListItem","remove","arr","id","addListItem","listItem","random","voice","text","push","displayError","window","setTimeout","actions","actionGetTranscriptionsData","context","getTranscriptions","then","response","commit","data","catch","error","addNewTranscription","deleteTranscription","uploadTranscriptionsData","invalidFields","filter","element","Object","values","some","x","length","saveTranscriptions"],"mappings":"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","sourcesContent":["import _ from 'lodash'\nimport transcriptionsEndpoints from '@/api/transcriptionsEndpoints'\n\nexport default {\n  state: {\n    transcriptionsData: [],\n    errorMessage: '',\n  },\n  getters: {\n    getInfoDataTranscriptions(state) {\n      return state.transcriptionsData\n    },\n    getInfoDataErrorMessage(state) {\n      return state.errorMessage\n    },\n  },\n  mutations: {\n    modifyListData(state, payload) {\n      state.transcriptionsData = payload\n    },\n    deleteListItem(state, payload) {\n      state.transcriptionsData = _.remove(state.transcriptionsData, (arr) => arr.id !== payload)\n    },\n    addListItem(state) {\n      const listItem = {\n        id: _.random(100000000, 100000000000000),\n        voice: '',\n        text: '',\n      }\n      state.transcriptionsData.push(listItem)\n    },\n    displayError(state, payload) {\n      state.errorMessage = payload\n\n      window.setTimeout(() => {\n        state.errorMessage = ''\n      }, 3000)\n    },\n  },\n  actions: {\n    async actionGetTranscriptionsData(context) {\n      await transcriptionsEndpoints.getTranscriptions()\n        .then((response) => {\n          context.commit('modifyListData', response.data)\n        })\n        .catch((error) => {\n          if (error) {\n            context.commit('displayError', 'An error occured while retrieving the transcriptions. Please try again.')\n          }\n        })\n    },\n    addNewTranscription(context) {\n      context.commit('addListItem')\n    },\n    deleteTranscription(context, payload) {\n      context.commit('deleteListItem', payload)\n    },\n    async uploadTranscriptionsData(context, payload) {\n      const invalidFields = payload.filter((element) => Object.values(element).some((x) => x === null || x === '')).length\n\n      if (invalidFields) {\n        context.commit('displayError', 'The list you\\'re trying to upload is empty or has invalid or non saved fields.')\n      } else {\n        await transcriptionsEndpoints.saveTranscriptions(payload)\n          .then(() => {\n            //\n          })\n          .catch((error) => {\n            if (error) {\n              context.commit('displayError', 'An error occured while saving the transcriptions. Please try again.')\n            }\n          })\n      }\n    },\n  },\n}\n"]}]}