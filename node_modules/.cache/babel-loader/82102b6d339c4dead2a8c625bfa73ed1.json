{"remainingRequest":"/Users/hypnotic/Desktop/frontend-challenge/node_modules/babel-loader/lib/index.js!/Users/hypnotic/Desktop/frontend-challenge/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/hypnotic/Desktop/frontend-challenge/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hypnotic/Desktop/frontend-challenge/src/components/ui/EditableText.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/hypnotic/Desktop/frontend-challenge/src/components/ui/EditableText.vue","mtime":1580421273966},{"path":"/Users/hypnotic/Desktop/frontend-challenge/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hypnotic/Desktop/frontend-challenge/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/hypnotic/Desktop/frontend-challenge/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hypnotic/Desktop/frontend-challenge/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.string.trim\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'EditableText',\n  props: {\n    value: {\n      required: true,\n      type: String\n    },\n    customClass: String,\n    type: String\n  },\n  data: function data() {\n    return {\n      activeInput: false\n    };\n  },\n  methods: {\n    toogleInput: function toogleInput() {\n      var _this = this;\n\n      this.activeInput = !this.activeInput;\n\n      if (this.activeInput) {\n        window.setTimeout(function () {\n          _this.$refs.input.focus();\n        }, 50);\n      }\n    },\n    inputEvent: function inputEvent(ev) {\n      this.$emit('input', ev.target.value.trim());\n    }\n  }\n};",{"version":3,"sources":["EditableText.vue"],"names":[],"mappings":";;;;;;;;;;;AAYA,eAAA;AACA,EAAA,IAAA,EAAA,cADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,KAAA,EAAA;AACA,MAAA,QAAA,EAAA,IADA;AAEA,MAAA,IAAA,EAAA;AAFA,KADA;AAKA,IAAA,WAAA,EAAA,MALA;AAMA,IAAA,IAAA,EAAA;AANA,GAFA;AAUA,EAAA,IAVA,kBAUA;AACA,WAAA;AACA,MAAA,WAAA,EAAA;AADA,KAAA;AAGA,GAdA;AAeA,EAAA,OAAA,EAAA;AACA,IAAA,WADA,yBACA;AAAA;;AACA,WAAA,WAAA,GAAA,CAAA,KAAA,WAAA;;AACA,UAAA,KAAA,WAAA,EAAA;AACA,QAAA,MAAA,CAAA,UAAA,CAAA,YAAA;AACA,UAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,KAAA;AACA,SAFA,EAEA,EAFA;AAGA;AACA,KARA;AASA,IAAA,UATA,sBASA,EATA,EASA;AACA,WAAA,KAAA,CAAA,OAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA;AACA;AAXA;AAfA,CAAA","sourcesContent":["<template>\n  <div>\n    <span :class=\"[{'empty': !value}, {'hide': activeInput}, customClass]\" @click=\"toogleInput\">\n      {{ value ? value : 'Click to add content here...' }}\n    </span>\n    <input v-if=\"type !== 'multiline'\" ref=\"input\" type=\"text\" :value=\"value\" @input=\"inputEvent\" @blur=\"toogleInput\">\n    <textarea v-if=\"type === 'multiline'\" ref=\"input\" :value=\"value\" @input=\"inputEvent\" @blur=\"toogleInput\"></textarea>\n  </div>\n</template>\n\n<script>\n\nexport default {\n  name: 'EditableText',\n  props: {\n    value: {\n      required: true,\n      type: String,\n    },\n    customClass: String,\n    type: String,\n  },\n  data() {\n    return {\n      activeInput: false,\n    }\n  },\n  methods: {\n    toogleInput() {\n      this.activeInput = !this.activeInput\n      if (this.activeInput) {\n        window.setTimeout(() => {\n          this.$refs.input.focus()\n        }, 50)\n      }\n    },\n    inputEvent(ev) {\n      this.$emit('input', ev.target.value.trim())\n    },\n  },\n}\n</script>\n\n<style scoped lang=\"scss\">\nspan {\n  cursor: pointer;\n  display: block;\n\n  &.voice {\n    @include list-title;\n    margin: 2px 0 8px 0;\n\n    & + input {\n      @include list-title;\n      margin: 0 0 4px 0;\n    }\n    & + textarea {\n      @include list-title;\n      margin: 0 0 4px 0;\n    }\n  }\n\n  &.text {\n    @include list-text;\n\n    & + input {\n      @include list-text;\n    }\n    & + textarea {\n      @include list-text;\n    }\n  }\n\n  &.empty {\n    opacity: 0.6;\n  }\n\n  &.hide {\n    display: none;\n\n    & + input {\n      display: block;\n    }\n    & + textarea {\n      display: block;\n    }\n  }\n\n  & + input {\n    display: none;\n    width: 100%;\n  }\n  & + textarea {\n    display: none;\n    width: 100%;\n    resize: none;\n    height: 150px;\n  }\n}\n</style>\n"],"sourceRoot":"src/components/ui"}]}