{"remainingRequest":"/Users/hypnotic/Downloads/frontend-challenge-master 3/node_modules/babel-loader/lib/index.js!/Users/hypnotic/Downloads/frontend-challenge-master 3/node_modules/eslint-loader/index.js??ref--13-0!/Users/hypnotic/Downloads/frontend-challenge-master 3/src/store/storeModules.js","dependencies":[{"path":"/Users/hypnotic/Downloads/frontend-challenge-master 3/src/store/storeModules.js","mtime":1580404840393},{"path":"/Users/hypnotic/Downloads/frontend-challenge-master 3/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hypnotic/Downloads/frontend-challenge-master 3/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/hypnotic/Downloads/frontend-challenge-master 3/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/hypnotic/Downloads/frontend-challenge-master 3/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport transcriptionsServices from '@/api/transcriptionsServices';\nimport _ from 'lodash';\nexport default {\n  state: {\n    transcriptionsData: [],\n    errorMessage: ''\n  },\n  getters: {\n    getInfoDataTranscriptions: function getInfoDataTranscriptions(state) {\n      return state.transcriptionsData;\n    },\n    getInfoDataErrorMessage: function getInfoDataErrorMessage(state) {\n      return state.errorMessage;\n    }\n  },\n  mutations: {\n    modifyListData: function modifyListData(state, payload) {\n      state.transcriptionsData = payload;\n    },\n    deleteListItem: function deleteListItem(state, payload) {\n      state.transcriptionsData = _.remove(state.transcriptionsData, function (arr) {\n        return arr.id !== payload;\n      });\n    },\n    addListItem: function addListItem(state) {\n      var listItem = {\n        id: _.random(100000000, 100000000000000),\n        voice: '',\n        text: ''\n      };\n      state.transcriptionsData.push(listItem);\n    },\n    displayError: function displayError(state, payload) {\n      state.errorMessage = payload;\n      window.setTimeout(function () {\n        state.errorMessage = '';\n      }, 3000);\n    }\n  },\n  actions: {\n    actionGetTranscriptionsData: function () {\n      var _actionGetTranscriptionsData = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(context) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return transcriptionsServices.getTranscriptions().then(function (response) {\n                  context.commit('modifyListData', response.data);\n                }, function (error) {\n                  if (error) {\n                    context.commit('displayError', 'An error occured while retrieving the transcriptions. Please try again.');\n                  }\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function actionGetTranscriptionsData(_x) {\n        return _actionGetTranscriptionsData.apply(this, arguments);\n      }\n\n      return actionGetTranscriptionsData;\n    }(),\n    addNewTranscription: function addNewTranscription(context) {\n      context.commit('addListItem');\n    },\n    deleteTranscription: function deleteTranscription(context, payload) {\n      context.commit('deleteListItem', payload);\n    },\n    uploadTranscriptionsData: function () {\n      var _uploadTranscriptionsData = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(context, payload) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                console.log(payload);\n                _context2.next = 3;\n                return transcriptionsServices.saveTranscriptions(payload).then(function (response) {//\n                }, function (error) {\n                  if (error) {\n                    context.commit('displayError', 'An error occured while saving the transcriptions. Please try again.');\n                  }\n                });\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function uploadTranscriptionsData(_x2, _x3) {\n        return _uploadTranscriptionsData.apply(this, arguments);\n      }\n\n      return uploadTranscriptionsData;\n    }()\n  }\n};",{"version":3,"sources":["/Users/hypnotic/Downloads/frontend-challenge-master 3/src/store/storeModules.js"],"names":["transcriptionsServices","_","state","transcriptionsData","errorMessage","getters","getInfoDataTranscriptions","getInfoDataErrorMessage","mutations","modifyListData","payload","deleteListItem","remove","arr","id","addListItem","listItem","random","voice","text","push","displayError","window","setTimeout","actions","actionGetTranscriptionsData","context","getTranscriptions","then","response","commit","data","error","addNewTranscription","deleteTranscription","uploadTranscriptionsData","console","log","saveTranscriptions"],"mappings":"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","sourcesContent":["import transcriptionsServices from '@/api/transcriptionsServices'\nimport _ from 'lodash'\n\nexport default {\n  state: {\n    transcriptionsData: [],\n    errorMessage: ''\n  },\n  getters: {\n    getInfoDataTranscriptions (state) {\n      return state.transcriptionsData\n    },\n    getInfoDataErrorMessage (state) {\n      return state.errorMessage\n    }\n  },\n  mutations: {\n    modifyListData (state, payload) {\n      state.transcriptionsData = payload\n    },\n    deleteListItem (state, payload) {\n      state.transcriptionsData = _.remove(state.transcriptionsData, (arr) => {\n        return arr.id !== payload\n      })\n    },\n    addListItem (state) {\n      const listItem = {\n        id: _.random(100000000, 100000000000000),\n        voice: '',\n        text: ''\n      }\n      state.transcriptionsData.push(listItem)\n    },\n    displayError (state, payload) {\n      state.errorMessage = payload\n\n      window.setTimeout(() => {\n        state.errorMessage = ''\n      }, 3000)\n    }\n  },\n  actions: {\n    async actionGetTranscriptionsData (context) {\n      await transcriptionsServices.getTranscriptions().then((response) => {\n        context.commit('modifyListData', response.data)\n      }, (error) => {\n        if (error) {\n          context.commit('displayError', 'An error occured while retrieving the transcriptions. Please try again.')\n        }\n      })\n    },\n    addNewTranscription (context) {\n      context.commit('addListItem')\n    },\n    deleteTranscription (context, payload) {\n      context.commit('deleteListItem', payload)\n    },\n    async uploadTranscriptionsData (context, payload) {\n      console.log(payload)\n      await transcriptionsServices.saveTranscriptions(payload).then((response) => {\n        //\n      }, (error) => {\n        if (error) {\n          context.commit('displayError', 'An error occured while saving the transcriptions. Please try again.')\n        }\n      })\n    }\n  }\n}\n"]}]}