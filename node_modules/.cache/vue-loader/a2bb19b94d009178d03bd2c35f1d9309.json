{"remainingRequest":"/Users/hypnotic/Desktop/frontend-challenge/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hypnotic/Desktop/frontend-challenge/src/components/elements/EditableText.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/hypnotic/Desktop/frontend-challenge/src/components/elements/EditableText.vue","mtime":1580427075358},{"path":"/Users/hypnotic/Desktop/frontend-challenge/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hypnotic/Desktop/frontend-challenge/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/hypnotic/Desktop/frontend-challenge/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hypnotic/Desktop/frontend-challenge/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'EditableText',\n  props: {\n    value: {\n      required: true,\n      type: String,\n    },\n    customClass: String,\n    type: String,\n  },\n  data() {\n    return {\n      activeInput: false,\n    }\n  },\n  methods: {\n    toogleInput() {\n      this.activeInput = !this.activeInput\n      if (this.activeInput) {\n        window.setTimeout(() => {\n          this.$refs.input.focus()\n        }, 50)\n      }\n    },\n    inputEvent(ev) {\n      this.$emit('input', ev.target.value.trim())\n    },\n  },\n}\n",{"version":3,"sources":["EditableText.vue"],"names":[],"mappings":";;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"EditableText.vue","sourceRoot":"src/components/elements","sourcesContent":["<template>\n  <div>\n    <span :class=\"[{'empty': !value}, {'hide': activeInput}, customClass]\" @click=\"toogleInput\">\n      {{ value ? value : 'Click to add content here...' }}\n    </span>\n    <input v-if=\"type !== 'multiline'\" ref=\"input\" type=\"text\" :value=\"value\" @input=\"inputEvent\" @blur=\"toogleInput\">\n    <textarea v-if=\"type === 'multiline'\" ref=\"input\" :value=\"value\" @input=\"inputEvent\" @blur=\"toogleInput\"></textarea>\n  </div>\n</template>\n\n<script>\n  export default {\n    name: 'EditableText',\n    props: {\n      value: {\n        required: true,\n        type: String,\n      },\n      customClass: String,\n      type: String,\n    },\n    data() {\n      return {\n        activeInput: false,\n      }\n    },\n    methods: {\n      toogleInput() {\n        this.activeInput = !this.activeInput\n        if (this.activeInput) {\n          window.setTimeout(() => {\n            this.$refs.input.focus()\n          }, 50)\n        }\n      },\n      inputEvent(ev) {\n        this.$emit('input', ev.target.value.trim())\n      },\n    },\n  }\n</script>\n\n<style scoped lang=\"scss\">\n  span {\n    cursor: pointer;\n    display: block;\n\n    &.voice {\n      @include list-title;\n      margin: 2px 0 8px 0;\n\n      & + input {\n        @include list-title;\n        margin: 0 0 4px 0;\n      }\n      & + textarea {\n        @include list-title;\n        margin: 0 0 4px 0;\n      }\n    }\n\n    &.text {\n      @include list-text;\n\n      & + input {\n        @include list-text;\n      }\n      & + textarea {\n        @include list-text;\n      }\n    }\n\n    &.empty {\n      opacity: 0.6;\n    }\n\n    &.hide {\n      display: none;\n\n      & + input {\n        display: block;\n      }\n      & + textarea {\n        display: block;\n      }\n    }\n\n    & + input {\n      display: none;\n      width: 100%;\n    }\n    & + textarea {\n      display: none;\n      width: 100%;\n      resize: none;\n      height: 150px;\n    }\n  }\n</style>\n"]}]}